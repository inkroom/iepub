name: release
on:
  workflow_dispatch:

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      NEXT_VERSION: ${{ steps.v.outputs.NEXT_VERSION }}
      PREV_VERSION: ${{ steps.v.outputs.PREV_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.80.1
          components: rustfmt, clippy
      - name: Unit Test
        run: |
          cargo test --package iepub --lib --all-features -- --exact --show-output
      - name: Get Version
        id: v
        run: |
          echo NEXT_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_OUTPUT
          echo PREV_VERSION=$(cargo search iepub --limit 1 | sed -nE 's/^[^"]*"//; s/".*//1p' -) >> $GITHUB_OUTPUT
  release:
    runs-on: ubuntu-latest
    needs: [version]
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
         fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Get Now Release Version
        id: v
        run: |
          echo NOW_RELEASE=$(git --no-pager tag | grep ${{ needs.version.outputs.NEXT_VERSION }} | sed 's@v@@') >> $GITHUB_OUTPUT
      - name: Docker Build
        uses: docker/build-push-action@v5
        if: needs.version.outputs.NEXT_VERSION != steps.v.outputs.NOW_RELEASE
        id: docker_id
        with:
          context: .
          file: Dockerfile
          load: true
          push: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker Image
        if: needs.version.outputs.NEXT_VERSION != steps.v.outputs.NOW_RELEASE
        id: ex
        run: |
          sed -ex
          docker images
          image_id="${{ steps.docker_id.outputs.imageid }}"
          image_id=${image_id:7}
          mkdir out
          cd out
          docker save -o out.tar $image_id
          tar xvf out.tar
          cat manifest.json
          tar xvf $(jq --raw-output '.[0].Layers[0]' manifest.json)
      - name: Release
        if: needs.version.outputs.NEXT_VERSION != steps.v.outputs.NOW_RELEASE
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create -F CHANGELOG.md --target master v${{ needs.version.outputs.NEXT_VERSION }} ./out/iepub-tool

  publish:
    runs-on: ubuntu-latest
    needs: [version]
    if: needs.version.outputs.NEXT_VERSION != needs.version.outputs.PREV_VERSION
    strategy:
      fail-fast: false
      max-parallel: 1
      # 必须 每个crates依次 package后publish，因为后续的package的时候要求前面的必须在crates.io，所以不能一次性把所有crate都packages后再publish
      matrix:
        package:
          - crate: iepub-derive
            path: derive
            args: -vv
          - crate: iepub
            path: lib
            args: --no-verify -vv
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.80.1
          components: rustfmt, clippy

      - name: Checkout
        uses: actions/checkout@v4

      - name: Cargo login
        run: cargo login ${{ secrets.CRATES_TOKEN }}
      - name: Get Version
        id: v
        run: |
          echo NEXT_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_OUTPUT
          echo PREV_VERSION=$(cargo search ${{ matrix.package.crate }} --limit 1 | sed -nE 's/^[^"]*"//; s/".*//1p' -) >> $GITHUB_OUTPUT
      - name: Cargo package
        if: steps.v.outputs.NEXT_VERSION != steps.v.outputs.PREV_VERSION
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "Releasing version: ${{ needs.version.outputs.NEXT_VERSION }}"
          echo "Cargo Packaging..."
          cargo package ${{ matrix.package.args }}

      - name: Publish ${{ matrix.package.name }}
        if: steps.v.outputs.NEXT_VERSION != steps.v.outputs.PREV_VERSION
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "Cargo Publishing..."
          cargo publish ${{ matrix.package.args }}
          echo "New version $NEXT_VERSION has been published"
